#include <stdio.h>
#include <stdlib.h>
#include <getopt.h>
#include <stdbool.h>
#define LINE_MAX 1024
int preemptive=0;

struct node2        
{
    int burstTime, arrivalTime, priority, pid;
    struct node2 *next;

};
struct node2 *header;


struct node2 *createNode(int bT,int aT,int pr,int pi){
	struct node2 * temp;
	temp=(struct node2 *) malloc (sizeof (struct node2));
	temp->burstTime=bT;
	temp->arrivalTime=aT;
	temp->priority=pr;
	temp->pid=pi;
	temp->next= NULL;
return temp;
	
}



struct node2 *insertBack(struct node2 *header, int b, int a, int p, int row)
{
    struct node2 *temp = createNode(b, a, p, row);
    struct node2 *datatemp;
    if (header == NULL)
    {
        header = temp;
        return header;
    }
    datatemp = header;
    while (datatemp->next != NULL)
        datatemp = datatemp->next;
    datatemp->next = temp;
    return header;
}

int n,t=0;
double sum=0,sum2=0;
double avg_time,avg_tat;

struct node {
int job, arrival_time , burst_time, ct , waiting_time , turnaround_time ;
struct node *next;
};
struct node *start = NULL;
struct Job{
    int Job_id, arrival_time, cpu_burst, reaming_time,
        waiting_time, turnaround_time, response_time, lastresponse_time;
};
struct Job job_queue[LINE_MAX];
struct Job CPU;
struct Job temp_process;
struct Node{
    struct Job job;
    struct Node *link;
}*head,*tail,*temp,*ptr,*min,*minLink;




struct node2  *readdata (void);
void schedulingMethod(void);
void simulationMenu(void);
void sortArrivals(struct node2 * header);
void swapingNodes(struct node2 *z,struct node2 *y);
void sortJobs(struct node2 *header); 
void sortPriority(struct node2 *header);

void FCFS(void);
void sjnp(void);
int SJF();
void MinProcess();
void queue(struct Job p);
void load_ReadyQueue(int var);







int countNodes(struct node2 *header);

 



char *input,*output,argument;
int main(int argc,char **argv)
{
    while((argument=getopt(argc,argv,"f:o:")) !=-1){
			
	if(argument=='f'){
		input=optarg;
	}
	else if(argument=='o'){
		output=optarg;
	}	}
	

 readdata();	
 simulationMenu();

return 0;
}

struct node2 *readdata(){
	
	FILE *fp;
char line[LINE_MAX];
 int num[3];
 int pid=0;

if ((fp = fopen("input.txt", "r")) == NULL){
printf("\n error opening the input file \n");
        return 0;}
while (fgets(line, LINE_MAX, fp) != NULL) {
	++pid;
        sscanf(line,"%d:%d:%d\n",&num[0],&num[1],&num[2]);
     
       header= insertBack(header,num[0],num[1],num[2],pid);
      
       
}

fclose(fp);

    return header;


}


		
		
		
	

void sortJobs(struct node2 *header){
	
	 struct node2 *tempdata = header;
   
       
        while (tempdata->next != NULL)
        {
            if (tempdata->burstTime > tempdata->next->burstTime)
            {
                swapingNodes(tempdata, tempdata->next);
                
            }
           tempdata = tempdata->next;
        }
        header = tempdata;    
  
}

int countNodes(struct node2 *header){
	int count=0;
	struct node2 *temp=header;
	while(temp!=NULL){
		count++;
		temp=temp->next;
	}
	return count;
}

void sortPriority(struct node2 *header){
	
	 struct node2 *tempdata = header;
   
       
        while (tempdata->next != NULL)
        {
            if (tempdata->priority > tempdata->next->priority)
            {
                swapingNodes
				(tempdata, tempdata->next);
                
            }
           tempdata = tempdata->next;
        }
        header = tempdata;    
  
}
	void sortArrivals(struct node2 *header){
    struct node2 *tempdata = header;
   
       
        while (tempdata->next != NULL)
        {
            if (tempdata->arrivalTime > tempdata->next->arrivalTime)
            {
                swapingNodes(tempdata, tempdata->next);
                
            }
           tempdata = tempdata->next;
        }
        header = tempdata;      	 
		
	}

void simulationMenu(){
	int option;
	printf("\t\t CPU Scheduler Simulator \n");
	printf("\n 1) Scheduling method");
	printf("\n 2) Preemptive Moode");
	printf("\n 3) Non-preemptive mode");
	printf("\n 4) Show Result");
	printf("\n 5) End Program");
   	printf("\n Option >:");

	scanf("%d", &option);
	switch(option){
		case 1:
			schedulingMethod();
			break;
		case 5:
			printf("\n\n \t\t Ending program....");
			exit (1);
		default:
			printf("Invalid Option\n");
			simulationMenu();
		}
}
void schedulingMethod(void){

	int option;
		printf("\n \t\t\t\t  Scheduling Simulator\n");
	printf("\n 1) First Come, First-Served Scheduling");
   	printf("\n 2) Shortest-Job-first Scheduling");
   	printf("\n 3) Shortest-Job (Non-Preemptive)");
	printf("\n 4) Round-Robin Scheduling");
	printf("\n 5) Go back to main menu");
	printf("\n 6) End Program");
    printf("\n Option >");

	scanf("%d",&option);

	switch(option){
		case 1:
			FCFS();
			break;
		case 2:
			SJF();
			break;
		case 3:
			sjnp();
			break;
		case 5:
			simulationMenu();
		case 6:
			printf("\n\n \t\t Ending program....\n");
			exit (1);
		default:
			printf("Invalid Option\n");
			simulationMenu();
			
			
	}	

}
	void swapingNodes(struct node2 *x, struct node2 *y){
	

	int temp_burstTime = x->burstTime;
    x->burstTime = y->burstTime;
    y->burstTime = temp_burstTime;

    int temp_arrivalTime = x->arrivalTime;
    x->arrivalTime = y->arrivalTime;
    y->arrivalTime = temp_arrivalTime;

    int temp_priority = x->priority;
    x->priority = y->priority;
    y->priority = temp_priority;

    int temp_pid = x->pid;
    x->pid = y->pid;
    y->pid = temp_pid;
}
int SJF(){

int i,j;
    int loop_time;


FILE *fp;
char line[LINE_MAX];
unsigned int num[3];

if ((fp = fopen("input.txt", "r")) == NULL)
        return 0;


while (fgets(line, LINE_MAX, fp) != NULL) {
        sscanf(line,"%d:%d:%d\n",&num[0],&num[1],&num[2]);
        job_queue[i].arrival_time = num[1];
        job_queue[i].cpu_burst = num[0];
        job_queue[i].Job_id=i+1;
        job_queue[i].reaming_time=job_queue[i].cpu_burst;
        t=t+job_queue[i].cpu_burst;
        i++;

    }
    n=i;
    fclose(fp);
    for(j=0;j<t;j++){
        load_ReadyQueue(j);
        if(CPU.reaming_time==0){
            MinProcess();
            if(min==NULL){
                printf("|IDLE|");
            }else{
                CPU=min->job;
                CPU.lastresponse_time=j;
                if(CPU.cpu_burst==CPU.reaming_time){
                CPU.response_time=j;
                }
                if(min==head && min==tail){
                    head=NULL;
                    tail=NULL;
                    free(min);
                }else if(min==head && min!=tail){
                    head=min->link;
                    free(min);
                }else if(min==tail && min!=head){
                    minLink=head;
                    ptr=head;
                    while(ptr->link!=NULL){
                        minLink=ptr;
                        ptr=ptr->link;
                    }
                    tail=minLink;
                    minLink->link=NULL;
                    free(min);
                    minLink=NULL;
                }else if(min!=head && min!=tail){
                    minLink=head;
                    ptr=head;
                    while(ptr->link!=min){
                        minLink=ptr;
                        ptr=ptr->link;
                    }
                    minLink->link=min->link;
                    free(min);
                    minLink=NULL;
                }
                CPU.reaming_time--;


            }
        }else if(CPU.reaming_time>0){
            MinProcess();
            if(min!=NULL && min->job.reaming_time < CPU.reaming_time){
                    if(min==head && min==tail){
                        temp_process=CPU;
                        head=NULL;
                        tail=NULL;
                        CPU=min->job;
                        CPU.lastresponse_time=j;
                         if(CPU.cpu_burst==CPU.reaming_time){
                          CPU.response_time=j;
                           }
                        CPU.reaming_time--;

                        free(min);
                        queue(temp_process);
                    }else if(min==head && min!=tail){
                        temp_process=CPU;
                        head=min->link;
                        CPU=min->job;
                        CPU.lastresponse_time=j;
                           if(CPU.response_time==0){
                            CPU.response_time=j;
                             }
                        CPU.reaming_time--;

                        free(min);
                        queue(temp_process);
                    }else if(min!=head && min==tail){
                        minLink=head;
                        ptr=head;
                        while(ptr->link!=NULL){
                            minLink=ptr;
                            ptr=ptr->link;
                        }
                        temp_process=CPU;
                        CPU=min->job;
                        CPU.lastresponse_time=j;
                        if(CPU.cpu_burst==CPU.reaming_time){
                         CPU.response_time=j;
                         }
                        tail=minLink;
                        minLink->link=NULL;
                        CPU.reaming_time--;

                        free(min);
                        queue(temp_process);
                    }else{
                        minLink=head;
                        ptr=head;
                        while(ptr->link!=min){
                            minLink=ptr;
                            ptr=ptr->link;
                        }
                        temp_process=CPU;
                        CPU=min->job;
                        CPU.lastresponse_time=j;
                        if(CPU.cpu_burst==CPU.reaming_time){
                          CPU.response_time=j;
                          }
                        minLink->link=min->link;
                        CPU.reaming_time--;

                        free(min);
                        queue(temp_process);
                    }

            }else{
                CPU.reaming_time--;

            }

        }
        if(CPU.reaming_time==0){
            job_queue[CPU.Job_id-1].turnaround_time=j-job_queue[CPU.Job_id-1].arrival_time+1;
            job_queue[CPU.Job_id-1].waiting_time=job_queue[CPU.Job_id-1].turnaround_time-job_queue[CPU.Job_id-1].cpu_burst;
            job_queue[CPU.Job_id-1].response_time=CPU.response_time;
            job_queue[CPU.Job_id-1].lastresponse_time=CPU.lastresponse_time;
        }

    }
    FILE * fp2;


   fp2 = fopen ("output1.txt","w");
   printf ("Scheduling Method: Shortest-Job First (Preemitive)\n");
 printf ("Process Waiting Times:\n");
   fprintf (fp2, "Scheduling Method: Shortest-Job First (Preemitive)\n");
 fprintf (fp2, "Process Waiting Times:\n");

    for(i=0;i<n;i++){
        fprintf(fp2, "P%d:\t%d ms\n",job_queue[i].Job_id,job_queue[i].waiting_time);
        printf("P%d:\t%d ms\n",job_queue[i].Job_id,job_queue[i].waiting_time);
        sum=sum+job_queue[i].waiting_time;
        sum2=sum2+job_queue[i].turnaround_time;
    }
    avg_time=sum/n;
    avg_tat=sum2/n;

    fprintf(fp2, "Average waiting time: %lf\n",avg_time);
    printf( "Average waiting time: %lf\n",avg_time);
    fclose (fp2);
    printf("Simulation complete. Output printed in output1.txt\n");
    simulationMenu();
    
}





void queue(struct Job p){

    if(tail==NULL){
        temp=(struct Node *)malloc(1*sizeof(struct Node));
        temp->link=NULL;
        temp->job=p;
        head=temp;
        tail=head;
    }else{
        temp = (struct Node *)malloc(1*sizeof(struct Node));
        tail->link=temp;
        temp->job=p;
        temp->link=NULL;
        tail=temp;
    }
}

void MinProcess()
{
    ptr=head;

    if(ptr==NULL){
        min=NULL;
        return;
    }
      min = head;
    for (ptr=ptr->link;ptr!=NULL;ptr=ptr->link)
    {
        if(ptr->job.reaming_time < min->job.reaming_time){
            min=ptr;
        }else if(ptr->job.reaming_time==min->job.reaming_time){
            if(ptr->job.Job_id < min->job.Job_id){
                min=ptr;
            }
        }else {

        }
    }

}

void load_ReadyQueue(int var){
    int i;
    for(i=0;i<n;i++){
        if(job_queue[i].arrival_time==var){
            queue(job_queue[i]);
        }
    }


}
void FCFS(void){                 //FIRST-COME, FIRST-SERVED                                  
	FILE *malaf;
    malaf=fopen("output1.txt","w");
	printf("\n\n \t\t\t\t FIRST COME FIRST SERVED \n Process waiting Time:");
	fprintf(malaf,"\n\n \t\t\t\t FIRST COME FIRST SERVED \n Process waiting Time:");

        int waiting=0,count=0,totalWaiting=0,pi=0;
        double averageWaiting=0;
        struct node2 *temp=header;

      while(temp!=NULL){ 
	    sortArrivals(header);
		temp=temp->next;}
	    
	    temp=header;
	    
	    while(temp!=NULL){
	    	count++;
	    	waiting=waiting-temp->arrivalTime;
	    	pi=temp->pid;
		   	printf("\n p%d=%d ms.",pi,waiting);
	     	fprintf(malaf,"\n p%d=%d ms.",pi,waiting);
         	totalWaiting=totalWaiting+waiting;
		   	waiting=waiting+temp->burstTime+temp->arrivalTime;
		   	
      	temp=temp->next; 
      	 }
      	 
      	 
      	       
			 averageWaiting=totalWaiting/count;
			printf("\n The Average Waiting Time = %0.2f ms.",averageWaiting);	   
			fprintf(malaf,"\n The Average Waiting Time = %0.2f ms.",averageWaiting);	   
          fclose(malaf);
     
	 simulationMenu();	}
	 
void sjnp(void){
	FILE *fp2;
    fp2=fopen("output1.txt","w");
	printf("Scheduling Method: Shortest-Job First (Non-Preemitive)\n");
	printf ("Process Waiting Times:");
   	fprintf(fp2,"Scheduling Method: Shortest-Job First (Non-Preemitive):\n");

	struct node2 *temp=header;
	struct node2 *temp2=temp;
    int count=countNodes(temp);
    int ii=0,i=0 , j=0,burst[count],arrival[count],pid[count], waiting=0,tempburst=0,totalWaiting=0;
    
    while(temp!=NULL){
    sortJobs(temp2);
    temp=temp->next; 
		}
		
		temp=temp2;
    for(ii;ii<count;ii++){
    burst[ii]=temp->burstTime;
	arrival[ii]=temp->arrivalTime;
	pid[ii]=temp->pid;
	temp=temp->next;
    		}
    		
for(i;i<count;i++){
for(j=0;j<count;j++){
	if(waiting-arrival[j] >= 0 && burst[j] != 0){
		waiting=waiting-arrival[j];
		totalWaiting=totalWaiting+waiting;
		
		printf("\n p%d = %d ms.",pid[j],waiting);
		fprintf(fp2,"\n p%d = %d ms.",pid[j],waiting);

		waiting=waiting+burst[j]+arrival[j];
		burst[j]=0;
	}
}	
 }
double averagewaiting=totalWaiting/(float)count;
 printf("\n Average Waiting Time: %0.2f  ms.",averagewaiting);
 fprintf(fp2,"\n Average Waiting Time: %0.2f  ms.",averagewaiting);
 fclose(fp2);
 
 simulationMenu();
       }
